#include "test.h"
#include "encrypt.h"

/**
 * TestAESEncrypt256ECB - Encrypt plaintext with specified 256-bit key in
 * electronic codebook (ECB) mode and compare against expected ciphertext.
 *
 * @return Pass if generated cipher text matches expected value.
 */

TestResult TestAESEncrypt256ECB()
{
    TestResult res;

    const vector<uint8_t> plainTxt =
    {
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    };

    const vector<uint32_t> key =
    {
        0x603DEB10, 0x15CA71BE, 0x2B73AEF0, 0x857D7781,
        0x1F352C07, 0x3B6108D7, 0x2D9810A3, 0x0914DFF4
    };

    const vector<uint8_t> cipherTxtExp =
    {
        0xF3, 0xEE, 0xD1, 0xBD, 0xB5, 0xD2, 0xA0, 0x3C, 0x06, 0x4B, 0x5A, 0x7E, 0x3D, 0xB1, 0x81, 0xF8,
        0x59, 0x1C, 0xCB, 0x10, 0xD4, 0x10, 0xED, 0x26, 0xDC, 0x5B, 0xA7, 0x4A, 0x31, 0x36, 0x28, 0x70,
        0xB6, 0xED, 0x21, 0xB9, 0x9C, 0xA6, 0xF4, 0xF9, 0xF1, 0x53, 0xE7, 0xB1, 0xBE, 0xAF, 0xED, 0x1D,
        0x23, 0x30, 0x4B, 0x7A, 0x39, 0xF9, 0xF3, 0xFF, 0x06, 0x7D, 0x8D, 0x8F, 0x9E, 0x24, 0xEC, 0xC7
    };

    vector<uint8_t> cipherTxtAct;
    AES aes(AES256, ECB);
    aes.Encrypt(plainTxt, cipherTxtAct, key);

    if (cipherTxtAct.size() != cipherTxtExp.size() ||
        (memcmp(&cipherTxtAct[0], &cipherTxtExp[0], cipherTxtAct.size()) != 0))
    {
        res.caseResults.push_back({ FAIL, "Unexpected cipher text generated in AES256 ECB encryption."});
    }
    else
    {
        res.caseResults.push_back({ PASS, "" });
    }

    return res;
}

/**
 * TestAESDecrypt256ECB - Decrypt plaintext with specified 256-bit key in
 * electronic codebook (ECB) mode and compare against expected ciphertext.
 *
 * @return Pass if generated cipher text matches expected value.
 */

TestResult TestAESDecrypt256ECB()
{
    TestResult res;

    const vector<uint8_t> cipherTxt =
    {
        0xF3, 0xEE, 0xD1, 0xBD, 0xB5, 0xD2, 0xA0, 0x3C, 0x06, 0x4B, 0x5A, 0x7E, 0x3D, 0xB1, 0x81, 0xF8,
        0x59, 0x1C, 0xCB, 0x10, 0xD4, 0x10, 0xED, 0x26, 0xDC, 0x5B, 0xA7, 0x4A, 0x31, 0x36, 0x28, 0x70,
        0xB6, 0xED, 0x21, 0xB9, 0x9C, 0xA6, 0xF4, 0xF9, 0xF1, 0x53, 0xE7, 0xB1, 0xBE, 0xAF, 0xED, 0x1D,
        0x23, 0x30, 0x4B, 0x7A, 0x39, 0xF9, 0xF3, 0xFF, 0x06, 0x7D, 0x8D, 0x8F, 0x9E, 0x24, 0xEC, 0xC7
    };

    const vector<uint32_t> key =
    {
        0x603DEB10, 0x15CA71BE, 0x2B73AEF0, 0x857D7781,
        0x1F352C07, 0x3B6108D7, 0x2D9810A3, 0x0914DFF4
    };

    const vector<uint8_t> plainTxtExp =
    {
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    };

    vector<uint8_t> plainTxtAct;
    AES aes(AES256, ECB);

    aes.Decrypt(cipherTxt, plainTxtAct, key);

    if (plainTxtAct.size() != plainTxtExp.size() ||
        (memcmp(&plainTxtAct[0], &plainTxtExp[0], plainTxtAct.size()) != 0))
    {
        res.caseResults.push_back({ FAIL, "Unexpected cipher text generated in AES256 ECB encryption." });
    }
    else
    {
        res.caseResults.push_back({ PASS, "" });
    }

    return res;
}

/**
 * TestAESEncrypt192ECB - Encrypt plaintext with specified 256-bit key in
 * electronic codebook (ECB) mode and compare against expected ciphertext.
 *
 * @return Pass if generated cipher text matches expected value.
 */

TestResult TestAESEncrypt192ECB()
{
    TestResult res;

    const vector<uint8_t> plainTxt =
    {
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    };

    const vector<uint32_t> key =
    {
        0x8E73B0F7, 0xDA0E6452, 0xC810F32B, 0x809079E5,
        0x62F8EAD2, 0x522C6B7B
    };

    const vector<uint8_t> cipherTxtExp =
    {
        0xBD, 0x33, 0x4F, 0x1D, 0x6E, 0x45, 0xF2, 0x5F, 0xF7, 0x12, 0xA2, 0x14, 0x57, 0x1F, 0xA5, 0xCC,
        0x97, 0x41, 0x04, 0x84, 0x6D, 0x0A, 0xD3, 0xAD, 0x77, 0x34, 0xEC, 0xB3, 0xEC, 0xEE, 0x4E, 0xEF,
        0xEF, 0x7A, 0xFD, 0x22, 0x70, 0xE2, 0xE6, 0x0A, 0xDC, 0xE0, 0xBA, 0x2F, 0xAC, 0xE6, 0x44, 0x4E,
        0x9A, 0x4B, 0x41, 0xBA, 0x73, 0x8D, 0x6C, 0x72, 0xFB, 0x16, 0x69, 0x16, 0x03, 0xC1, 0x8E, 0x0E
    };

    vector<uint8_t> cipherTxtAct;
    AES aes(AES192, ECB);
    aes.Encrypt(plainTxt, cipherTxtAct, key);

    if (cipherTxtAct.size() != cipherTxtExp.size() ||
        (memcmp(&cipherTxtAct[0], &cipherTxtExp[0], cipherTxtAct.size()) != 0))
    {
        res.caseResults.push_back({ FAIL, "Unexpected cipher text generated in AES256 ECB encryption." });
    }
    else
    {
        res.caseResults.push_back({ PASS, "" });
    }

    return res;
}

/**
 * TestAESDecrypt192ECB - Decrypt plaintext with specified 256-bit key in
 * electronic codebook (ECB) mode and compare against expected ciphertext.
 *
 * @return Pass if generated cipher text matches expected value.
 */

TestResult TestAESDecrypt192ECB()
{
    TestResult res;

    const vector<uint8_t> cipherTxt =
    {
        0xBD, 0x33, 0x4F, 0x1D, 0x6E, 0x45, 0xF2, 0x5F, 0xF7, 0x12, 0xA2, 0x14, 0x57, 0x1F, 0xA5, 0xCC,
        0x97, 0x41, 0x04, 0x84, 0x6D, 0x0A, 0xD3, 0xAD, 0x77, 0x34, 0xEC, 0xB3, 0xEC, 0xEE, 0x4E, 0xEF,
        0xEF, 0x7A, 0xFD, 0x22, 0x70, 0xE2, 0xE6, 0x0A, 0xDC, 0xE0, 0xBA, 0x2F, 0xAC, 0xE6, 0x44, 0x4E,
        0x9A, 0x4B, 0x41, 0xBA, 0x73, 0x8D, 0x6C, 0x72, 0xFB, 0x16, 0x69, 0x16, 0x03, 0xC1, 0x8E, 0x0E
    };

    const vector<uint32_t> key =
    {
        0x8E73B0F7, 0xDA0E6452, 0xC810F32B, 0x809079E5,
        0x62F8EAD2, 0x522C6B7B
    };

    const vector<uint8_t> plainTxtExp =
    {
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    };

    vector<uint8_t> plainTxtAct;
    AES aes(AES192, ECB);

    aes.Decrypt(cipherTxt, plainTxtAct, key);

    if (plainTxtAct.size() != plainTxtExp.size() ||
        (memcmp(&plainTxtAct[0], &plainTxtExp[0], plainTxtAct.size()) != 0))
    {
        res.caseResults.push_back({ FAIL, "Unexpected cipher text generated in AES256 ECB encryption." });
    }
    else
    {
        res.caseResults.push_back({ PASS, "" });
    }

    return res;
}

/**
 * TestAESEncrypt128ECB - Encrypt plaintext with specified 256-bit key in
 * electronic codebook (ECB) mode and compare against expected ciphertext.
 *
 * @return Pass if generated cipher text matches expected value.
 */

TestResult TestAESEncrypt128ECB()
{
    TestResult res;

    const vector<uint8_t> plainTxt =
    {
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    };

    const vector<uint32_t> key =
    {
        0x2B7E1516, 0x28AED2A6, 0xABF71588, 0x09CF4F3C
    };

    const vector<uint8_t> cipherTxtExp =
    {
        0x3A, 0xD7, 0x7B, 0xB4, 0x0D, 0x7A, 0x36, 0x60, 0xA8, 0x9E, 0xCA, 0xF3, 0x24, 0x66, 0xEF, 0x97,
        0xF5, 0xD3, 0xD5, 0x85, 0x03, 0xB9, 0x69, 0x9D, 0xE7, 0x85, 0x89, 0x5A, 0x96, 0xFD, 0xBA, 0xAF,
        0x43, 0xB1, 0xCD, 0x7F, 0x59, 0x8E, 0xCE, 0x23, 0x88, 0x1B, 0x00, 0xE3, 0xED, 0x03, 0x06, 0x88,
        0x7B, 0x0C, 0x78, 0x5E, 0x27, 0xE8, 0xAD, 0x3F, 0x82, 0x23, 0x20, 0x71, 0x04, 0x72, 0x5D, 0xD4
    };

    vector<uint8_t> cipherTxtAct;
    AES aes(AES128, ECB);
    aes.Encrypt(plainTxt, cipherTxtAct, key);

    if (cipherTxtAct.size() != cipherTxtExp.size() ||
        (memcmp(&cipherTxtAct[0], &cipherTxtExp[0], cipherTxtAct.size()) != 0))
    {
        res.caseResults.push_back({ FAIL, "Unexpected cipher text generated in AES256 ECB encryption." });
    }
    else
    {
        res.caseResults.push_back({ PASS, "" });
    }

    return res;
}

/**
 * TestAESDecrypt128ECB - Decrypt plaintext with specified 256-bit key in
 * electronic codebook (ECB) mode and compare against expected ciphertext.
 *
 * @return Pass if generated cipher text matches expected value.
 */

TestResult TestAESDecrypt128ECB()
{
    TestResult res;

    const vector<uint8_t> cipherTxt =
    {
        0x3A, 0xD7, 0x7B, 0xB4, 0x0D, 0x7A, 0x36, 0x60, 0xA8, 0x9E, 0xCA, 0xF3, 0x24, 0x66, 0xEF, 0x97,
        0xF5, 0xD3, 0xD5, 0x85, 0x03, 0xB9, 0x69, 0x9D, 0xE7, 0x85, 0x89, 0x5A, 0x96, 0xFD, 0xBA, 0xAF,
        0x43, 0xB1, 0xCD, 0x7F, 0x59, 0x8E, 0xCE, 0x23, 0x88, 0x1B, 0x00, 0xE3, 0xED, 0x03, 0x06, 0x88,
        0x7B, 0x0C, 0x78, 0x5E, 0x27, 0xE8, 0xAD, 0x3F, 0x82, 0x23, 0x20, 0x71, 0x04, 0x72, 0x5D, 0xD4
    };

    const vector<uint32_t> key =
    {
        0x2B7E1516, 0x28AED2A6, 0xABF71588, 0x09CF4F3C
    };

    const vector<uint8_t> plainTxtExp =
    {
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    };

    vector<uint8_t> plainTxtAct;
    AES aes(AES128, ECB);

    aes.Decrypt(cipherTxt, plainTxtAct, key);

    if (plainTxtAct.size() != plainTxtExp.size() ||
        (memcmp(&plainTxtAct[0], &plainTxtExp[0], plainTxtAct.size()) != 0))
    {
        res.caseResults.push_back({ FAIL, "Unexpected cipher text generated in AES256 ECB encryption." });
    }
    else
    {
        res.caseResults.push_back({ PASS, "" });
    }

    return res;
}

/**
 * TestAESEncrypt128CBC - Encrypt plaintext with specified 128-bit key in
 * cipher block chaining (CBC) mode and compare against expected ciphertext.
 *
 * @return Pass if generated cipher text matches expected value.
 */

TestResult TestAESEncrypt128CBC()
{
    TestResult res;

    const vector<uint8_t> plainTxt =
    {
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    };

    const vector<uint32_t> key =
    {
        0x2b7e1516, 0x28aed2a6, 0xabf71588, 0x09cf4f3c
    };

    const vector<uint32_t> iv =
    {
        0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f
    };

    const vector<uint8_t> cipherTxtExp =
    {
        0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
        0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2,
        0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16,
        0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09, 0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7
    };

    vector<uint8_t> cipherTxtAct;

    AES aes(AES128, CBC);
    aes.SetIV(iv);
    aes.Encrypt(plainTxt, cipherTxtAct, key);

    if (cipherTxtAct.size() != cipherTxtExp.size() ||
        (memcmp(&cipherTxtAct[0], &cipherTxtExp[0], cipherTxtAct.size()) != 0))
    {
        res.caseResults.push_back({ FAIL, "Unexpected cipher text generated in AES256 ECB encryption." });
    }
    else
    {
        res.caseResults.push_back({ PASS, "" });
    }

    return res;
}

/**
 * TestAESEncrypt192CBC - Encrypt plaintext with specified 192-bit key in
 * cipher block chaining (CBC) mode and compare against expected ciphertext.
 *
 * @return Pass if generated cipher text matches expected value.
 */

TestResult TestAESEncrypt192CBC()
{
    TestResult res;

    const vector<uint8_t> plainTxt =
    {
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    };

    const vector<uint32_t> key =
    {
        0x8e73b0f7, 0xda0e6452, 0xc810f32b, 0x809079e5, 0x62f8ead2, 0x522c6b7b
    };

    const vector<uint32_t> iv =
    {
        0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f
    };

    const vector<uint8_t> cipherTxtExp =
    {
        0x4f, 0x02, 0x1d, 0xb2, 0x43, 0xbc, 0x63, 0x3d, 0x71, 0x78, 0x18, 0x3a, 0x9f, 0xa0, 0x71, 0xe8,
        0xb4, 0xd9, 0xad, 0xa9, 0xad, 0x7d, 0xed, 0xf4, 0xe5, 0xe7, 0x38, 0x76, 0x3f, 0x69, 0x14, 0x5a,
        0x57, 0x1b, 0x24, 0x20, 0x12, 0xfb, 0x7a, 0xe0, 0x7f, 0xa9, 0xba, 0xac, 0x3d, 0xf1, 0x02, 0xe0,
        0x08, 0xb0, 0xe2, 0x79, 0x88, 0x59, 0x88, 0x81, 0xd9, 0x20, 0xa9, 0xe6, 0x4f, 0x56, 0x15, 0xcd
    };

    vector<uint8_t> cipherTxtAct;

    AES aes(AES192, CBC);
    aes.SetIV(iv);
    aes.Encrypt(plainTxt, cipherTxtAct, key);

    if (cipherTxtAct.size() != cipherTxtExp.size() ||
        (memcmp(&cipherTxtAct[0], &cipherTxtExp[0], cipherTxtAct.size()) != 0))
    {
        res.caseResults.push_back({ FAIL, "Unexpected cipher text generated in AES256 ECB encryption." });
    }
    else
    {
        res.caseResults.push_back({ PASS, "" });
    }

    return res;
}

/**
 * TestAESEncrypt256CBC - Encrypt plaintext with specified 256-bit key in
 * cipher block chaining (CBC) mode and compare against expected ciphertext.
 *
 * @return Pass if generated cipher text matches expected value.
 */

TestResult TestAESEncrypt256CBC()
{
    TestResult res;

    const vector<uint8_t> plainTxt =
    {
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    };

    const vector<uint32_t> key =
    {
        0x603deb10, 0x15ca71be, 0x2b73aef0, 0x857d7781,
        0x1f352c07, 0x3b6108d7, 0x2d9810a3, 0x0914dff4
    };

    const vector<uint32_t> iv =
    {
        0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f
    };

    const vector<uint8_t> cipherTxtExp =
    {
        0xf5, 0x8c, 0x4c, 0x04, 0xd6, 0xe5, 0xf1, 0xba, 0x77, 0x9e, 0xab, 0xfb, 0x5f, 0x7b, 0xfb, 0xd6,
        0x9c, 0xfc, 0x4e, 0x96, 0x7e, 0xdb, 0x80, 0x8d, 0x67, 0x9f, 0x77, 0x7b, 0xc6, 0x70, 0x2c, 0x7d,
        0x39, 0xf2, 0x33, 0x69, 0xa9, 0xd9, 0xba, 0xcf, 0xa5, 0x30, 0xe2, 0x63, 0x04, 0x23, 0x14, 0x61,
        0xb2, 0xeb, 0x05, 0xe2, 0xc3, 0x9b, 0xe9, 0xfc, 0xda, 0x6c, 0x19, 0x07, 0x8c, 0x6a, 0x9d, 0x1b
    };

    vector<uint8_t> cipherTxtAct;

    AES aes(AES256, CBC);
    aes.SetIV(iv);
    aes.Encrypt(plainTxt, cipherTxtAct, key);

    if (cipherTxtAct.size() != cipherTxtExp.size() ||
        (memcmp(&cipherTxtAct[0], &cipherTxtExp[0], cipherTxtAct.size()) != 0))
    {
        res.caseResults.push_back({ FAIL, "Unexpected cipher text generated in AES256 ECB encryption." });
    }
    else
    {
        res.caseResults.push_back({ PASS, "" });
    }

    return res;
}