#include "test.h"
#include "encrypt.h"

/**
 * TestAESEncryptECB - Encrypt plaintext with specified 256-bit key in
 * electronic codebook (ECB) mode and compare against expected ciphertext.
 *
 * @return Pass if generated cipher text matches expected value.
 */

TestResult TestAESEncrypt256ECB()
{
    TestResult res;

    const vector<uint8_t> plainTxt =
    {
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    };

    const vector<uint32_t> key =
    {
        0x603DEB10, 0x15CA71BE, 0x2B73AEF0, 0x857D7781,
        0x1F352C07, 0x3B6108D7, 0x2D9810A3, 0x0914DFF4
    };

    const vector<uint8_t> cipherTxtExp =
    {
        0xF3, 0xEE, 0xD1, 0xBD, 0xB5, 0xD2, 0xA0, 0x3C, 0x06, 0x4B, 0x5A, 0x7E, 0x3D, 0xB1, 0x81, 0xF8,
        0x59, 0x1C, 0xCB, 0x10, 0xD4, 0x10, 0xED, 0x26, 0xDC, 0x5B, 0xA7, 0x4A, 0x31, 0x36, 0x28, 0x70,
        0xB6, 0xED, 0x21, 0xB9, 0x9C, 0xA6, 0xF4, 0xF9, 0xF1, 0x53, 0xE7, 0xB1, 0xBE, 0xAF, 0xED, 0x1D,
        0x23, 0x30, 0x4B, 0x7A, 0x39, 0xF9, 0xF3, 0xFF, 0x06, 0x7D, 0x8D, 0x8F, 0x9E, 0x24, 0xEC, 0xC7
    };

    vector<uint8_t> cipherTxtAct;
    AES aes(AES256, ECB);
    aes.Encrypt(plainTxt, cipherTxtAct, key);

    if (cipherTxtAct.size() != cipherTxtExp.size() ||
        (memcmp(&cipherTxtAct[0], &cipherTxtExp[0], cipherTxtAct.size()) != 0))
    {
        res.caseResults.push_back({ FAIL, "Unexpected cipher text generated in AES256 ECB encryption."});
    }
    else
    {
        res.caseResults.push_back({ PASS, "" });
    }

    return res;
}